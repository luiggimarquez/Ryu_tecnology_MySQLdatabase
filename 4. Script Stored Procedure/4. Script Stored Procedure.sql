USE RYU_TECHNOLOGY; -- SELECCIONAMOS EL SCHEMMA DEL PROYECTO RYU_TECHNOLOGY

DROP PROCEDURE IF EXISTS SP_ORDENAR ; -- PRIMERO, ELIMINAMOS EL SP SI YA EXISTE CON EL DROP
DELIMITER **
CREATE PROCEDURE SP_ORDENAR(INOUT PARAMETRO_POR_ORDENAR VARCHAR(25),INOUT ORDEN_ASCENDENTE_DESCENDENTE VARCHAR(4))
/* CREAMOS EL STORED PROCEDURE DECLARANDO DOS VARIABLES: PARAMETRO_POR_ORDENAR, PUEDE SER CUALQUIER CAMPO DE LA TABLA PRODUCTO : ID, NOMBRE, CATEGORIA, TIPO;
EL PARAMETRO ORDEN_ASCENDENTE_DESCENDENTE PUEDER SER ASC O DESC DEPENDIENDO SI SE QUIERE ORDENAR CRECIENTE O DECRECIENTE 
*/
BEGIN
SET @CATEGORY =  CONCAT('SELECT * FROM PRODUCTO ORDER BY',' ',PARAMETRO_POR_ORDENAR,' ',ORDEN_ASCENDENTE_DESCENDENTE);
/* SE ALMACENA EN @CATEGORY LA SENTENCIA CONCATENADA DONDE SELECCIONAMOS LA TABLA A ANALIZAR, EN ESTE CASO PRODUCTO CON LA SENTENCIA ORDEN BY DEL DESAFÍO,
ESTOS VAN EN COMILLAS SIMPLES Y LUEGO, PARAMETRO_POR_ORDENAR ENTRE COMAS, SIN COMILLAS Y POR ÚLTIMA, ORDEN_ASCENDENTE_DESCENDENTE, EL SEGUNDO PARAMETRO QUE INDICA EL ORDEN*/
PREPARE CONSULTA FROM @CATEGORY; -- SIRVE PARA PREPARAR UNA PREPARED STATEMENT PARA LA  APLICACIÓN DARLE UN NOMBRE UNÍVOCO  PARA RECUPERAR Y CONTROLAR LA SENTENCIA.
EXECUTE CONSULTA;  -- SIRVE PARA INDICAR QUÉ PREPARED STATEMENT SE QUIERE EJECUTAR, SE INTRODUCE EL NOMBRE GENERADO CON PREPARE
DEALLOCATE PREPARE CONSULTA; -- SE USA PARA ANULAR UNA PREPARED STATEMENT.
END **
DELIMITER ;
SET @PARAMETRO_POR_ORDENAR = 'TIPO'; -- AQUÍ SE ASIGNA EL VALOR A NUESTRO PRIMER PARÁMETRO, EL CAMPO QUE VAMOS A TRABAJAR
SET @ORDEN_ASCENDENTE_DESCENDENTE = 'ASC'; -- AQUÍ SE ASIGNA EL SEGUNDO PARAMETRO, QUE INDICA SI SE ORDENARA CRECIENTE O DECRECIENTE
-- CALL SP_ORDENAR(@PARAMETRO_POR_ORDENAR ,@ORDEN_ASCENDENTE_DESCENDENTE); -- CON CALL LLAMAMOS A NUESTRO SP



DROP PROCEDURE IF EXISTS SP_INSERT_DELETE_PRODUCT_CATEGORY;  -- PRIMERO, ELIMINAMOS EL SP SI YA EXISTE CON EL DROP
DELIMITER **
CREATE PROCEDURE SP_INSERT_DELETE_PRODUCT_CATEGORY (IN INSERT_OR_DELETE VARCHAR(7),IN CATEGORY_NAME VARCHAR(20))
/* CREAMOS EL SP, EL PARAMETRO INSERT_OR_DELETE SIRVE PARA ESPECIFICAR SI SE INSERTA O BORRAR EL PARAMETRO CATEGORY_NAME; 
EL PARAMETRO CATEGORY_NAME REPRESENTA EL VALOR QUE SE AÑADIRÁ O ELIMINARÁ A LA COLUMNA NOMBRE_CATEGORIA, DE LA TABLA CATEGORIA;
*/
PROC_LABEL:BEGIN 
	-- SE EJECUTA UN CONDICIONAL IF-ELSE PARA REALIZAR LA OPERACION, ESTO DEPENDE DE PARAMETRO DE ENTRADA INSERT_OR_DELETE

	IF UPPER(INSERT_OR_DELETE) LIKE 'INSERT' THEN
	SET @RESULT= CONCAT("INSERT INTO CATEGORIA(NOMBRE_CATEGORIA) VALUES ('" , CATEGORY_NAME, "')");
	-- SI TENEMOS UN INSERT, SE CUMPLE EL IF Y GUARDARMOS EN @RESULT LA CONCATENACIÓN DE LA INSTRUCCION SQL PARA INSERTAR EL VALOR CON EL PARAMETRO CATEGORY_NAME
    
    ELSEIF UPPER(INSERT_OR_DELETE) = 'DELETE' THEN
    SET @RESULT= CONCAT("DELETE FROM CATEGORIA WHERE NOMBRE_CATEGORIA ='", CATEGORY_NAME,"'");
    -- SI TENEMOS UN DELETE, SE CUMPLE EL ELSEIF Y GUARDARMOS EN @RESULT LA CONCATENACIÓN DE LA INSTRUCCION SQL PARA BORRAR EL VALOR CON EL PARAMETRO CATEGORY_NAME

	ELSE
	LEAVE PROC_LABEL;
    -- ESTADO NULO, SI NO SE CUMPLE IF O ELSEIF NOS SALIMOS DEL CONDICIONAL CON LEAVE

	END IF;
    SET SQL_SAFE_UPDATES = 0; -- DESHABILITAMOS EL MODO SEGURO DE ACTUALIZACIONES PARA EVITAR ERROR AL ACTUALIZAR/ BORRAR
	PREPARE MODIFICATION FROM @RESULT; -- SIRVE PARA PREPARAR UNA PREPARED STATEMENT PARA LA  APLICACIÓN DARLE UN NOMBRE UNÍVOCO  PARA RECUPERAR Y CONTROLAR LA SENTENCIA.
	EXECUTE MODIFICATION; -- SIRVE PARA INDICAR QUÉ PREPARED STATEMENT SE QUIERE EJECUTAR, SE INTRODUCE EL NOMBRE GENERADO CON PREPARE
	DEALLOCATE PREPARE MODIFICATION; -- SE USA ARA ANULAR UNA PREPARED STATEMENT.
    SET SQL_SAFE_UPDATES = 1; -- ACTIVAMOS NUEVAMENTE EL MODO SEGURO DE ACTUALIZACIONES

END **
DELIMITER ;

SET @INSERT_OR_DELETE = 'INSERT';  -- AQUI SE ASIGNA EL VALOR A NUESTRO PRIMER PARÁMETRO, EL CAMPO QUE VAMOS A TRABAJAR: INSERT O DELETE
SET @CATEGORY_NAME = 'WIFI_EXTENDER'; -- AQUI SE ASIGNA EL SEGUNDO PARAMETRO, QUE INDICA EL VALOR NUEVO QUE SE AGREGARA O EL VALOR A ELIMINAR EN LA TABLA
CALL SP_INSERT_DELETE_PRODUCT_CATEGORY(@INSERT_OR_DELETE,@CATEGORY_NAME);  -- CON CALL LLAMAMOS A NUESTRO SP
-- SELECT * FROM CATEGORIA; -- CONSULTAMOS QUE SE HAYA BORRADO/AGREGADO EL VALOR EN NUESTRA TABLA CATEGORIA
